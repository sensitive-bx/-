题目描述：每次可选择走一阶或走两阶
输出描述：输出一个整数，即可以走的的方法数。
思路：对于本题,前提只有 一次 1阶或者2阶的跳法。
a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);
b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)
c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2) 
d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2
e.可以发现最终得出的是一个斐波那契数列：
             1, (n=1)
f(n) =     2, (n=2)
              f(n-1)+f(n-2) ,(n>2,n为整数)
#include<stdio.h>
//递归-效率低
int Fib(int n)
{
	if(n <= 2)
	{
		return n;
	}
	else
	{
		return Fib(n-1) +Fib(n-2);
	}
}
int main(void)
{
	int n = 0;
	scanf("%d", &n);
	int ret = Fib(n);
	printf("%d\n", ret);
 } 